<?php

use Drupal\Component\Utility\Xss as UtilityXss;
use Drupal\Core\Database\Connection;
use Drupal\Core\Database\Query\AlterableInterface;
use Drupal\Core\Entity\EntityInterface;
use Drupal\Core\Form\FormStateInterface;
use Drupal\Core\Entity\ContentEntityInterface;
use Drupal\rules\Event\EntityEvent;
use Drupal\node\Entity\Node;
use Symfony\Component\HttpFoundation\Request;
use Drupal\node\NodeInterface;
use Drupal\Core\Entity\EntityForm;
use Drupal\Core\Url;
/**
 * @file
 * Set a timer into your content, allowing you to perform customized actions.
 */

const NODE_EXPIRE_FORMAT = 'Y-m-d';
const NODE_EXPIRE_FORMAT_JS = 'yy-mm-dd';
// define('NODE_EXPIRE_COMMON_DEFAULT_DATE', '2048-01-01');
// Will be placed to the "expire" field corresponding empty
// ("never expire") strings. 2461500000 is 2048-01-01.
const NODE_EXPIRE_NO_EXPIRE = 2145848400;

/**
 * Implements hook_cron().
 */
function node_expire_cron() {
  $handle_content_expiry = \Drupal::getContainer()->get('config.factory')->getEditable('node_expire.settings')->get('node_expire_handle_content_expiry');
  if ($handle_content_expiry != 2) {
    $result = \Drupal::database()->query('SELECT n.nid FROM {node} n
      JOIN {node_expire} ne ON n.nid = ne.nid
      WHERE ne.expire <= :ne_expire',
      array(':ne_expire' => \Drupal::time()->getCurrentTime()));
  }
  else {
    $result = \Drupal::database()->query('SELECT n.nid FROM {node} n
      JOIN {node_expire} ne ON n.nid = ne.nid
      WHERE ne.expire <= :ne_expire AND ne.expired = 0',
      array(':ne_expire' => \Drupal::time()->getCurrentTime()));
  }
  // $nids = array();

  if (Drupal::moduleHandler()->moduleExists('rules')) {
    if (function_exists('rules_invoke_event')) {

      foreach ($result as $record) {
        // $nids[] = $record->nid;
        node_expire_set_expired($record->nid);
        $node = \Drupal::entityTypeManager()
          ->getStorage('node')
          ->load($record->nid);
        rules_invoke_event('node_expired', $node);
      }

    }
  }

}

/**
 * Implements hook_entity_expire().
 *
 * This invokes event created in EntityNodeExpireDeriver // rules_invoke_event() in D9
 *                                                          to replace in node_expire_cron()
 */
function node_expire_rules_event_entity_expire(EntityInterface $entity) {
//function node_expire_cron(EntityInterface $entity) {

  if ($entity instanceof ContentEntityInterface) {
    $entity_type_id = $entity->getEntityTypeId();
    $event = new EntityEvent($entity, [$entity_type_id => $entity]);
    $event_dispatcher = \Drupal::service('event_dispatcher');
//    $event_dispatcher->dispatch("node_expire_event_entity_expire:$entity_type_id", $event);
    $event_dispatcher->dispatch("node_expire_action_unset_expired:$entity_type_id", $event);
  }
}


/**
 * Implements hook_menu().
 */
function node_expire_menu() {
  $items['admin/config/workflow/node_expire/settings'] = array(
    'title' => 'Node Expire',
    'description' => 'Configure node expire settings.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('node_expire_admin_settings'),
    'access arguments' => array('administer site configuration'),
    'file' => 'node_expire.admin.inc',
    'weight' => 2,
  );

  return $items;
}

/**
 * Implements hook_form_alter().
 *
 * Adds expiration options to the node entry forms
 */
function node_expire_form_alter(&$form, \Drupal\Core\Form\FormStateInterface &$form_state, $form_id) {

  // $ntypes is an array with all content types under node_expire
  $ntypes = \Drupal::getContainer()->get('config.factory')->getEditable('node_expire.settings')->get('node_expire_ntypes');
  $alltypes=array_keys($ntypes);

  // $extract 'contenttype' from $form_id, that usually is like: 'node_contenttype_edit_form'. i.e node_page_edit_form
  $extr1 = ltrim(strpbrk($form_id, '_'), '_'); // commented below as we successfully use 'form_object'

//  $fulllength=strlen($extr1);
//  // to count for a case when contentype have _underscore in its machine name
//  $ending_position = strrpos($extr1, '_', -7);
//  // a case when we just add new content
//  if (!$ending_position){
//    $ending_position = strrpos($extr1, '_', -4);
//  }
//  $endlength = strlen(substr($extr1, $ending_position)); // '_edit_form'
//  $curr_nodetype = substr($extr1,0,$fulllength-$endlength);
//  $is_node_form = true;
//if ($curr_nodetype === 'type'){
//  $curr_nodetype = $form['type']['#default_value'];
//  $is_node_form = false;
//}

  $op_path = \Drupal::service('path.current')->getPath();
  $check_op_add=strpos($op_path, '/add');
  $check_op_dit=strpos($op_path, '/edit');
  // do not show expire field when operation is node Delete or is a node preview
  $check_op_delete=strpos($op_path, '/delete');

  /** @var \Drupal\Core\Entity\EntityForm $form_object */
  $form_object = $form_state->getFormObject();
  $is_node_form=false;
  $curr_nodetype='';
  if ($form_object instanceof EntityForm) {
    $entity = $form_object->getEntity();
    // Do something with the entity.
    if (isset($entity)) {
      if ($entity->getEntityTypeId() === 'node') {
        $is_node_form = TRUE;
        $curr_nodetype = $entity->bundle();
      };
    }
  }

  $is_node_and_is_under_node_expire = in_array($curr_nodetype, $alltypes, true) && $ntypes[$curr_nodetype]['enabled'] && $is_node_form;

// //do not show expire field when operation is node Delete or is a node preview
//  $op_delete = false; //usually show field as usually operation is edit.
//  $is_operation = $_POST['op'] ?? NULL;
//  if (!$is_operation == "Preview" && $is_operation) {

//    $ini_op_check = $form_state->getFormObject()->getOperation();

//  }
//  if (isset($ini_op_check)) {
//    $op_delete = TRUE;
//    if (!$is_operation == "Preview") {
//      $op_check = $form_state->getFormObject()->getOperation();
//      $op_delete = FALSE;
//      if (($op_check === "delete") && ($ini_op_check === 'delete')) {
//        $op_delete = TRUE;
//      }
//    }
//  }

  if ((isset($form['#form_id'])) &&
    ($form['#form_id'] == $form_id) &&
    ($is_node_and_is_under_node_expire) &&
    (!$check_op_delete) &&
    ($ntypes = \Drupal::getContainer()->get('config.factory')->getEditable('node_expire.settings')->get('node_expire_ntypes')) &&
    (isset($curr_nodetype)) &&
    ($ntype = $curr_nodetype)) {
    \Drupal::moduleHandler()->loadInclude('node_expire', 'nodeapi.inc');
    _node_expire_form_alter_nodeform($ntype, $ntypes,$form, $form_state, $form_id, $entity);
  }

}

/**
 * Implements hook_form_alter().
 *
 * Enable/Disable expiration feature on node types
 */
//function node_expire_form_node_type_form_alter(&$form, FormStateInterface &$form_state) {
function node_expire_form_node_type_form_alter(&$form, FormStateInterface &$form_state, $form_id) {
  if (\Drupal::currentUser()->hasPermission('administer node expire')) {

    $ntypes = \Drupal::getContainer()->get('config.factory')->getEditable('node_expire.settings')
      ->get('node_expire_ntypes');

    $node_type = $form['type']['#default_value'];
    $handle_content_expiry = \Drupal::getContainer()->get('config.factory')->getEditable('node_expire.settings')
      ->get('node_expire_handle_content_expiry');

    if ($handle_content_expiry != 0) {
      $form['workflow']['node_expire_enabled'] = [
        '#title' => t('Enable Node Expiry'),
        '#description' => t('Allow nodes to expire after a certain amount of time.'),
        '#type' => 'checkbox',
        '#default_value' => empty($ntypes[$node_type]['enabled']) ? '' : $ntypes[$node_type]['enabled'],
      ];

      // Visibility.
      $states = [
        'visible' => [
          ':input[name="node_expire_enabled"]' => ['checked' => TRUE],
        ],
      ];

      $form['workflow']['node_expire_container'] = [
        '#type' => 'fieldset',
        '#title' => t('Node Expire'),
        '#collapsible' => FALSE,
        '#collapsed' => FALSE,
        '#states' => $states,
      ];

      // Text fields.
      $form['workflow']['node_expire_container']['node_expire'] = [
        '#title' => t('Default expiration date'),
        '#description' => t('Default date to consider the node expired.') . ' ' . t('Format: PHP <a href="https://www.php.net/manual/en/function.strtotime.php" target="_blank">strtotime format</a>.') . ' ' . t('ex: 5 May 2023, or +1 week'),
        '#type' => 'textfield',
        '#default_value' => empty($ntypes[$node_type]['default']) ? '' : $ntypes[$node_type]['default'],
        '#states' => $states,
      ];
      $form['workflow']['node_expire_container']['node_expire_max'] = [
        '#title' => t('Expiration date limit'),
        '#description' => t('The max date to consider the node expired.') . ' ' . t('Format: PHP <a href="https://www.php.net/manual/en/function.strtotime.php" target="_blank">strtotime format</a>.') . ' ' . t('Leave it blank if this there is no limit date.'),
        '#type' => 'textfield',
        '#default_value' => empty($ntypes[$node_type]['max']) ? '' : $ntypes[$node_type]['max'],
        '#states' => $states,
      ];

      $form['workflow']['node_expire_container']['node_expire_required'] = [
        '#title' => t('Expiration date required'),
        '#type' => 'checkbox',
        '#default_value' => !empty($ntypes[$node_type]['required']),
        '#states' => $states,
      ];
    }
    else {
      $form['workflow']['node_expire'] = [
        '#title' => t('Default expiration date'),
        '#description' => t('Default date to consider the node expired.') . ' ' . t('Format: PHP <a href="https://www.php.net/manual/en/function.strtotime.php" target="_blank">strtotime format</a>.') . ' ' . t('ex: now or, next Monday. Leave it blank if this content type never expires.'),
        '#type' => 'textfield',

        '#default_value' => empty($ntypes[$node_type]['default']) ? '' : $ntypes[$node_type]['default'],
      ];
      $form['workflow']['node_expire_max'] = [
        '#title' => t('Expiration date limit'),
        '#description' => t('The max date to consider the node expired.') . ' ' . t('Format: PHP <a href="https://www.php.net/manual/en/function.strtotime.php" target="_blank">strtotime format</a>.') . ' ' . t('Leave it blank if this there is no limit date.'),
        '#type' => 'textfield',

        '#default_value' => empty($ntypes[$node_type]['max']) ? '' : $ntypes[$node_type]['max'],
      ];
      $form['workflow']['node_expire_required'] = [
        '#title' => t('Expiration date required'),
        '#type' => 'checkbox',
        '#default_value' => !empty($ntypes[$node_type]['required']),
      ];
    }
    // Add special validate/submit functions.
    \Drupal::moduleHandler()->loadInclude('node_expire', 'ntype.inc');
    $form['#validate'][] = '_node_expire_form_node_type_form_alter_validate';
    foreach (array_keys($form['actions']) as $action) {
      if ($action != 'preview' && isset($form['actions'][$action]['#type']) && $form['actions'][$action]['#type'] === 'submit') {
        $form['actions'][$action]['#submit'][] = '_node_expire_form_node_type_form_alter_submit';
      }
    }
  }
}

/**
 * Implements hook_node_load().
 */
//function node_expire_node_load($nodes=[], $types=[]) {
function node_expire_node_load($nodes) {
  \Drupal::moduleHandler()->loadInclude('node_expire', 'nodeapi.inc');
  _node_expire_node_load($nodes);
}

/**
 * Implements hook_node_prepare().
 */
function node_expire_node_prepare_form($node) {
  // Only deal with node types that have the Node expire feature enabled.

$ntypes = \Drupal::getContainer()->get('config.factory')->getEditable('node_expire.settings')->get('node_expire_ntypes');
  if (!isset($ntypes[$node->getType()])) {
    return;
  }
  $ntype = $ntypes[$node->getType()];
  if (!$ntype) {
    return;
  }
  \Drupal::moduleHandler()->loadInclude('node_expire', 'nodeapi.inc');
  _node_expire_node_prepare($ntype, $node);
}

/**
 * Implements hook_node_validate().
 */
function node_expire_node_validate(\Drupal\node\NodeInterface $node) {
  // Only deal with node types that have the Node expire feature enabled.

$ntypes = \Drupal::getContainer()->get('config.factory')->getEditable('node_expire.settings')->get('node_expire_ntypes');
  if (!isset($ntypes[$node->getType()])) {
    return;
  }

  $ntype = $ntypes[$node->getType()];
  if (!$ntype) {
    return;
  }

  \Drupal::moduleHandler()->loadInclude('node_expire', 'nodeapi.inc');
  _node_expire_node_validate($ntype, $node);
}

/**
 * Implements hook_nodeapi_update().
 */
function node_expire_node_update(\Drupal\node\NodeInterface $node) {
  // Only deal with node types that have the Node expire feature enabled.

$ntypes = \Drupal::getContainer()->get('config.factory')->getEditable('node_expire.settings')->get('node_expire_ntypes');
  if (!isset($ntypes[$node->getType()])) {
    return;
  }
  $ntype = $ntypes[$node->getType()];
  if (!$ntype) {
    return;
  }
  \Drupal::moduleHandler()->loadInclude('node_expire', 'nodeapi.inc');
  _node_expire_node_update_insert($ntype, $node);
}

/**
 * Implements hook_nodeapi_insert().
 */
function node_expire_node_insert(\Drupal\node\NodeInterface $node) {
  // Only deal with node types that have the Node expire feature enabled.

$ntypes = \Drupal::getContainer()->get('config.factory')->getEditable('node_expire.settings')->get('node_expire_ntypes');
  if (!isset($ntypes[$node->getType()])) {
    return;
  }
  if (!$ntype = $ntypes[$node->getType()]) {
    return;
  }
  \Drupal::moduleHandler()->loadInclude('node_expire', 'nodeapi.inc');
  _node_expire_node_update_insert($ntype, $node);
}

/**
 * Implements hook_nodeapi_delete().
 */
function node_expire_node_delete(\Drupal\node\NodeInterface $node) {
  // Only deal with node types that have the Node expire feature enabled.

$ntypes = \Drupal::getContainer()->get('config.factory')->getEditable('node_expire.settings')->get('node_expire_ntypes');
  if (!isset($ntypes[$node->getType()])) {
    return;
  }
  $ntype = $ntypes[$node->getType()];
  if (!$ntype) {
    return;
  }
  \Drupal::moduleHandler()->loadInclude('node_expire', 'nodeapi.inc');
  _node_expire_node_delete($ntype, $node);
}

/**
 * Implements hook_permission().
 */
function node_expire_permission() {
  return array(
    'administer node expire' => array(
      'title' => t('administer node expire'),
      'description' => t('TODO Add a description for "administer node expire"'),
    ),
    'edit node expire' => array(
      'title' => t('edit node expire'),
      'description' => t('TODO Add a description for "edit node expire"'),
    ),
  );
}

/**
 * Implements hook_views_api().
 */
function node_expire_views_api() {
  return array(
    'api' => 2,
    'path' => \Drupal::service('extension.list.module')->getPath('node_expire'),
  );
}

/**
 * Sets expired values.
 *
 * @param int $nid
 *   Node ID that should set the expired flag.
 */
function node_expire_set_expired($nid) {
  $database = \Drupal::database();
  $query = $database->update('node_expire');
  $query->fields(
      [
        'expired' => 1,
        'lastnotify' => \Drupal::time()->getRequestTime(),
      ]
    );

  $group = $query
    ->orConditionGroup()
    ->condition('lastnotify', 0)
    ->condition('expired', 1, '!=');

  $query->condition('nid', $nid)
         ->condition($group);
  $query->execute();
}




/**
 * Gets condition for date entry elements.
 *
 * This depends on value of variable node_expire_date_entry_elements
 * and also is date_popup module of date module installed or not.
 *
 * @return int
 *   0 - use text fields
 *   1 - use date popups
 */
function _node_expire_get_date_entry_elements() {
  // core datetime not enabled.
  $module_enabled = \Drupal::moduleHandler()->moduleExists('datetime');
  if (!$module_enabled) {
    return 0;
  }

  // Legacy mode.
  if (\Drupal::getContainer()->get('config.factory')->getEditable('node_expire.settings')->get('node_expire_handle_content_expiry') == 0) {
    return 0;
  }

  return \Drupal::getContainer()->get('config.factory')->getEditable('node_expire.settings')->get('node_expire_date_entry_elements');
}

/**
 * Utility to display debug info.
 *
 * Display debug info and write it into log.
 *
 * @param object $data
 *   Data to display.
 */
function node_expire_debug($data = array()) {
  \Drupal::messenger()->addMessage(UtilityXss::filterAdmin('<pre>' . print_r($data, TRUE) . '</pre>'));
  \Drupal::logger('node_expire')->notice('<pre>' . print_r($data, TRUE) . '</pre>', []);
}

\Drupal::moduleHandler()->loadInclude('node_expire', 'ntype.inc');




